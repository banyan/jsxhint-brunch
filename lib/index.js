// Generated by CoffeeScript 1.8.0
var JsxhintLinter, formatError, fs, path, sh, _;

_ = require('lodash');

fs = require('fs');

sh = require('execSync');

path = require('path');

formatError = function(error) {
  return _.chain(error.split('\n')).compact().reject(function(row) {
    return /^\d+\serrors?$/.test(row);
  }).value().join('\n');
};

module.exports = JsxhintLinter = (function() {
  JsxhintLinter.prototype.brunchPlugin = true;

  JsxhintLinter.prototype.type = 'javascript';

  JsxhintLinter.prototype.extension = 'jsx';

  function JsxhintLinter(config) {
    var configFile, e, stats, _ref, _ref1, _ref2;
    this.config = config;
    config = ((_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? _ref1.jsxhint : void 0 : void 0) || {};
    this.warnOnly = (_ref2 = config != null ? config.warnOnly : void 0) != null ? _ref2 : true;
    configFile = path.join(process.cwd(), (config != null ? config.configFile : void 0) || ".jshintrc");
    this.pattern = (config != null ? config.pattern : void 0) || /^app\/.*\.jsx?$/;
    this.command = "jsxhint";
    try {
      stats = fs.statSync(configFile);
      if (stats.isFile()) {
        this.command += " -c " + configFile;
      }
    } catch (_error) {
      e = _error;
      e = e.toString().replace("Error: ENOENT, ", "");
      console.warn(".jshintrc parsing error: " + e + ". jsxhint will run with default options.");
    }
  }

  JsxhintLinter.prototype.lint = function(data, path, callback) {
    var error, result;
    result = sh.exec("" + this.command + " " + path);
    if (result.code === 0) {
      return callback();
    } else {
      error = formatError(result.stdout);
      if (this.warnOnly) {
        error = "warn: " + error;
      }
      return callback(error);
    }
  };

  return JsxhintLinter;

})();
