// Generated by CoffeeScript 1.9.3
var JsxhintLinter, _, exec, formatError, fs, path;

_ = require('lodash');

fs = require('fs');

exec = require('sync-exec');

path = require('path');

formatError = function(error) {
  return _.chain(error.split('\n')).compact().reject(function(row) {
    return /^\d+\serrors?$/.test(row);
  }).value().join('\n');
};

module.exports = JsxhintLinter = (function() {
  JsxhintLinter.prototype.brunchPlugin = true;

  JsxhintLinter.prototype.type = 'javascript';

  JsxhintLinter.prototype.extension = 'jsx';

  function JsxhintLinter(config1) {
    var config, configFile, e, ref, ref1, ref2, stats;
    this.config = config1;
    config = ((ref = this.config) != null ? (ref1 = ref.plugins) != null ? ref1.jsxhint : void 0 : void 0) || {};
    this.warnOnly = (ref2 = config != null ? config.warnOnly : void 0) != null ? ref2 : true;
    configFile = path.join(process.cwd(), (config != null ? config.configFile : void 0) || ".jshintrc");
    this.pattern = (config != null ? config.pattern : void 0) || /^app\/.*\.jsx?$/;
    this.command = "jsxhint";
    try {
      stats = fs.statSync(configFile);
      if (stats.isFile()) {
        this.command += " -c " + configFile;
      }
    } catch (_error) {
      e = _error;
      e = e.toString().replace("Error: ENOENT, ", "");
      console.warn(".jshintrc parsing error: " + e + ". jsxhint will run with default options.");
    }
  }

  JsxhintLinter.prototype.lint = function(data, path, callback) {
    var error, result;
    result = exec(this.command + " " + path);
    if (result.status === 0) {
      return callback();
    } else {
      error = formatError(result.stdout);
      if (this.warnOnly) {
        error = "warn: " + error;
      }
      return callback(error);
    }
  };

  return JsxhintLinter;

})();
